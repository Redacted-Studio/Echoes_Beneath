//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Mono Script/Player/Player_Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_Input"",
    ""maps"": [
        {
            ""name"": ""On_Foot"",
            ""id"": ""c974a9dc-e47d-4818-b392-6cc7392e26e1"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""5ee01c4a-08cd-4047-a8ae-b9f8aecdf7dc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""287404d5-2101-42ed-8866-db4a72753b52"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""961f08da-c32b-420a-a9ca-34eff28ee5d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""eea522ba-9eaf-4cc5-968a-2488fa86d32d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""3a5bd3fd-409f-46db-a4ea-e83a70ab0bf6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""a99be778-aed5-47b0-943a-1d97bd3fc6b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FlashLight"",
                    ""type"": ""Button"",
                    ""id"": ""eca31d0d-3ed5-40ab-bb35-06c149bbf406"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""eb401526-7354-4f1e-ad3a-8f5fbdae9389"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Journal"",
                    ""type"": ""Button"",
                    ""id"": ""0a29eedc-0278-40df-9dd7-3026d9a0af95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1a32ca5c-76fd-466a-9463-5efc33eb66d0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""99c6d42e-aa14-42b1-9eca-81a4ba260abb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1b888167-e55d-46a0-943f-21def5745d66"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1b4e1d5f-ff41-4e5c-99f6-3ee50c0895d5"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d714c861-a1f8-4c1a-ae63-8d5db200fa01"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0be6a5fc-fa42-471c-af29-faffb8cb6146"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""748eb672-cd56-442a-8c4d-27e7053d3e0f"",
                    ""path"": ""<Keyboard>/#(C)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""645dabb7-1fb6-4a00-b22c-d8028b62e87e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e144a6c4-689e-46d4-92f2-139984901541"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04fba1d0-840b-4094-9c4e-0fb293bcba70"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e69c573a-0c6c-4056-a47e-a42913209702"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FlashLight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f5c220b-c28e-4e4d-b5a0-87853df09522"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cc14a29-2e68-4176-92df-ae1a9fee1c4c"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Journal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // On_Foot
        m_On_Foot = asset.FindActionMap("On_Foot", throwIfNotFound: true);
        m_On_Foot_Movement = m_On_Foot.FindAction("Movement", throwIfNotFound: true);
        m_On_Foot_Jump = m_On_Foot.FindAction("Jump", throwIfNotFound: true);
        m_On_Foot_Crouch = m_On_Foot.FindAction("Crouch", throwIfNotFound: true);
        m_On_Foot_Look = m_On_Foot.FindAction("Look", throwIfNotFound: true);
        m_On_Foot_Interact = m_On_Foot.FindAction("Interact", throwIfNotFound: true);
        m_On_Foot_Run = m_On_Foot.FindAction("Run", throwIfNotFound: true);
        m_On_Foot_FlashLight = m_On_Foot.FindAction("FlashLight", throwIfNotFound: true);
        m_On_Foot_Inventory = m_On_Foot.FindAction("Inventory", throwIfNotFound: true);
        m_On_Foot_Journal = m_On_Foot.FindAction("Journal", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // On_Foot
    private readonly InputActionMap m_On_Foot;
    private List<IOn_FootActions> m_On_FootActionsCallbackInterfaces = new List<IOn_FootActions>();
    private readonly InputAction m_On_Foot_Movement;
    private readonly InputAction m_On_Foot_Jump;
    private readonly InputAction m_On_Foot_Crouch;
    private readonly InputAction m_On_Foot_Look;
    private readonly InputAction m_On_Foot_Interact;
    private readonly InputAction m_On_Foot_Run;
    private readonly InputAction m_On_Foot_FlashLight;
    private readonly InputAction m_On_Foot_Inventory;
    private readonly InputAction m_On_Foot_Journal;
    public struct On_FootActions
    {
        private @Player_Input m_Wrapper;
        public On_FootActions(@Player_Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_On_Foot_Movement;
        public InputAction @Jump => m_Wrapper.m_On_Foot_Jump;
        public InputAction @Crouch => m_Wrapper.m_On_Foot_Crouch;
        public InputAction @Look => m_Wrapper.m_On_Foot_Look;
        public InputAction @Interact => m_Wrapper.m_On_Foot_Interact;
        public InputAction @Run => m_Wrapper.m_On_Foot_Run;
        public InputAction @FlashLight => m_Wrapper.m_On_Foot_FlashLight;
        public InputAction @Inventory => m_Wrapper.m_On_Foot_Inventory;
        public InputAction @Journal => m_Wrapper.m_On_Foot_Journal;
        public InputActionMap Get() { return m_Wrapper.m_On_Foot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(On_FootActions set) { return set.Get(); }
        public void AddCallbacks(IOn_FootActions instance)
        {
            if (instance == null || m_Wrapper.m_On_FootActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_On_FootActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @FlashLight.started += instance.OnFlashLight;
            @FlashLight.performed += instance.OnFlashLight;
            @FlashLight.canceled += instance.OnFlashLight;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @Journal.started += instance.OnJournal;
            @Journal.performed += instance.OnJournal;
            @Journal.canceled += instance.OnJournal;
        }

        private void UnregisterCallbacks(IOn_FootActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @FlashLight.started -= instance.OnFlashLight;
            @FlashLight.performed -= instance.OnFlashLight;
            @FlashLight.canceled -= instance.OnFlashLight;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @Journal.started -= instance.OnJournal;
            @Journal.performed -= instance.OnJournal;
            @Journal.canceled -= instance.OnJournal;
        }

        public void RemoveCallbacks(IOn_FootActions instance)
        {
            if (m_Wrapper.m_On_FootActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOn_FootActions instance)
        {
            foreach (var item in m_Wrapper.m_On_FootActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_On_FootActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public On_FootActions @On_Foot => new On_FootActions(this);
    public interface IOn_FootActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnFlashLight(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnJournal(InputAction.CallbackContext context);
    }
}
